---
title: 15. 3Sum
tags: 数组遍历
---

问题：给一串数字，找出所有的三个数字，a+b+c=0 ， 返回的结果中不要有重复的。

``` stylus
For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
```
# 思路
1.将所有数字从小到大排序
2.对每一个位置的数字，从这个位置后面开始，找到两个与这个数字相加为0的数字。并且在找的过程中，重复的要略过。
3.对每个位置，如果有重复的数字，直接跳过。

``` cpp
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> result;
        sort(nums.begin(),nums.end(),less<int>());
        for(int i = 0;i<nums.size();i++){
            int target = -nums[i];
            int front = i+1;
            int back = nums.size()-1;
            while(front<back){
                int sum = nums[front]+nums[back];
                if(sum<target)
                    front++;
                else if(sum>target)
                    back--;
                else{
                    vector<int> vec;
                    int first = nums[front];
                    int second = nums[back];
                    vec.push_back(nums[i]);
                    vec.push_back(nums[front]);
                    vec.push_back(nums[back]);
                    result.push_back(vec);
                    front++;
                    back--;
                    while(front<back&&nums[front]==first)
                        front++;
                    while(front<back&&nums[back]==second)
                        back--;

                }
            }
            while(i+1<nums.size()&&nums[i+1] == nums[i])
                i++;
        }
        return result;
    }
};
```
这里2.是为了避免这种情况

> [-2, 0 ,0,2,2]
如果没有2这一步，最终会有两个[-2,0,2]

这里3是为了避免这种情况：
> [-1,-1,0,1]
如果没有3这一步，最终会有两个[-1,0,1]


